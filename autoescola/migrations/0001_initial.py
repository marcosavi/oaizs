# Generated by Django 4.1.3 on 2024-08-06 19:58

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.files.storage
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Autoescola",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "titulo",
                    models.CharField(
                        blank=True,
                        max_length=200,
                        null=True,
                        verbose_name="Título (opcional)",
                    ),
                ),
                (
                    "sub_titulo",
                    models.CharField(
                        blank=True,
                        max_length=500,
                        null=True,
                        verbose_name="Sub-Título (opcional)",
                    ),
                ),
                (
                    "beneficio_1",
                    models.CharField(
                        blank=True,
                        max_length=200,
                        null=True,
                        verbose_name="Beneficio 1 (opcional)",
                    ),
                ),
                (
                    "beneficio_2",
                    models.CharField(
                        blank=True,
                        max_length=200,
                        null=True,
                        verbose_name="Beneficio 2 (opcional)",
                    ),
                ),
                (
                    "beneficio_3",
                    models.CharField(
                        blank=True,
                        max_length=200,
                        null=True,
                        verbose_name="Beneficio 3 (opcional)",
                    ),
                ),
                (
                    "nome",
                    models.CharField(
                        help_text="Exemplo: X",
                        max_length=64,
                        verbose_name="Nome da autoescola (*)",
                    ),
                ),
                ("cnpj", models.IntegerField()),
                (
                    "endereco",
                    models.CharField(
                        blank=True,
                        max_length=200,
                        null=True,
                        verbose_name="Endereço (opcional)",
                    ),
                ),
                (
                    "whatsapp",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="Whatsapp (opcional)"
                    ),
                ),
                (
                    "facebook",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        verbose_name="Facebook (opcional)",
                    ),
                ),
                (
                    "instagram",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        verbose_name="Instagram (opcional)",
                    ),
                ),
                ("image_1", models.TextField(blank=True, null=True)),
                ("image_2", models.TextField(blank=True, null=True)),
                ("image_3", models.TextField(blank=True, null=True)),
                ("image_4", models.TextField(blank=True, null=True)),
                (
                    "logo",
                    models.ImageField(
                        storage=django.core.files.storage.FileSystemStorage,
                        upload_to="",
                    ),
                ),
                ("endereco_iframe", models.TextField(blank=True, null=True)),
                (
                    "endereco_formated",
                    models.CharField(blank=True, max_length=70, null=True),
                ),
                (
                    "pergunta_frequente_1",
                    models.CharField(
                        blank=True,
                        max_length=300,
                        null=True,
                        verbose_name="Pergunta frequente 1 (opcional)",
                    ),
                ),
                (
                    "pergunta_frequente_2",
                    models.CharField(
                        blank=True,
                        max_length=300,
                        null=True,
                        verbose_name="Pergunta frequente 2 (opcional)",
                    ),
                ),
                (
                    "pergunta_frequente_3",
                    models.CharField(
                        blank=True,
                        max_length=300,
                        null=True,
                        verbose_name="Pergunta frequente 3 (opcional)",
                    ),
                ),
                (
                    "slug",
                    models.SlugField(
                        blank=True, max_length=255, null=True, unique=True
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CustomUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                ("email", models.EmailField(max_length=100, unique=True)),
                ("cpf", models.CharField(max_length=11, unique=True)),
                ("last_login_date", models.DateField(blank=True, null=True)),
                ("login_streak", models.IntegerField(default=0)),
                (
                    "autoescola",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="autoescola.autoescola",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
